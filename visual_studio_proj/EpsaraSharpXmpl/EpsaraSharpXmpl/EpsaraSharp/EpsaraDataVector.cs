// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace epsara
{

    using System;
    using System.Collections;
    using System.Runtime.InteropServices;

    #region Autogenerated code
    public class EpsaraDataVector : GLib.Object
    {

        [Obsolete]
        protected EpsaraDataVector(GLib.GType gtype) : base(gtype) { }
        public EpsaraDataVector(IntPtr raw) : base(raw) { }

        [DllImport("libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr epsara_data_vector_new(int size);

        public EpsaraDataVector(int size) : base(IntPtr.Zero)
        {
            if (GetType() != typeof(EpsaraDataVector))
            {
                throw new InvalidOperationException("Can't override this constructor.");
            }
            Raw = epsara_data_vector_new(size);
        }

        [GLib.Property("size")]
        public int Size
        {
            get
            {
                GLib.Value val = GetProperty("size");
                int ret = (int)val;
                val.Dispose();
                return ret;
            }
            set
            {
                GLib.Value val = new GLib.Value(value);
                SetProperty("size", val);
                val.Dispose();
            }
        }
        [DllImport("libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern double epsara_data_vector_get(IntPtr raw, int i);

        [DllImport("libepsara-0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern void epsara_data_vector_set(IntPtr raw, int i, double x);

        public double this[int i]
        {
            get
            {
                double raw_ret = epsara_data_vector_get(Handle, i);
                double ret = raw_ret;
                return ret;
            }
            set
            {
                epsara_data_vector_set(Handle, i, value);
            }
        }

        [DllImport("libepsara-0.dll")]
        static extern void epsara_data_vector_set_zero(IntPtr raw);

        public void SetZero()
        {
            epsara_data_vector_set_zero(Handle);
        }

        [DllImport("libepsara-0.dll")]
        static extern int epsara_data_vector_copy(IntPtr raw, IntPtr src);

        public int Copy(epsara.EpsaraDataVector src)
        {
            int raw_ret = epsara_data_vector_copy(Handle, src == null ? IntPtr.Zero : src.Handle);
            int ret = raw_ret;
            return ret;
        }
        
        [DllImport("libepsara-0.dll")]
        static extern IntPtr epsara_data_vector_get_type();

        public static new GLib.GType GType
        {
            get
            {
                IntPtr raw_ret = epsara_data_vector_get_type();
                GLib.GType ret = new GLib.GType(raw_ret);
                return ret;
            }
        }

        [DllImport("libepsara-0.dll")]
        static extern int epsara_data_vector_swap(IntPtr raw, IntPtr src);

        public int Swap(epsara.EpsaraDataVector src)
        {
            int raw_ret = epsara_data_vector_swap(Handle, src == null ? IntPtr.Zero : src.Handle);
            int ret = raw_ret;
            return ret;
        }

        [DllImport("libepsara-0.dll")]
        static extern void epsara_data_vector_set_all(IntPtr raw, double x);

        public double All
        {
            set
            {
                epsara_data_vector_set_all(Handle, value);
            }
        }

        [DllImport("libepsara-0.dll")]
        static extern int epsara_data_vector_set_basis(IntPtr raw, int i);

        public int SetBasis(int i)
        {
            int raw_ret = epsara_data_vector_set_basis(Handle, i);
            int ret = raw_ret;
            return ret;
        }


        static EpsaraDataVector()
        {
            GtkSharp.EpsaraSharp.ObjectManager.Initialize();
        }
        #endregion
    }
}
